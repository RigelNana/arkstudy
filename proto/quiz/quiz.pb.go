// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.19.6
// source: quiz/quiz.proto

package quiz

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 题目类型枚举
type QuestionType int32

const (
	QuestionType_MULTIPLE_CHOICE QuestionType = 0 // 选择题
	QuestionType_FILL_BLANK      QuestionType = 1 // 填空题
	QuestionType_SHORT_ANSWER    QuestionType = 2 // 简答题
	QuestionType_TRUE_FALSE      QuestionType = 3 // 判断题
	QuestionType_ESSAY           QuestionType = 4 // 论述题
)

// Enum value maps for QuestionType.
var (
	QuestionType_name = map[int32]string{
		0: "MULTIPLE_CHOICE",
		1: "FILL_BLANK",
		2: "SHORT_ANSWER",
		3: "TRUE_FALSE",
		4: "ESSAY",
	}
	QuestionType_value = map[string]int32{
		"MULTIPLE_CHOICE": 0,
		"FILL_BLANK":      1,
		"SHORT_ANSWER":    2,
		"TRUE_FALSE":      3,
		"ESSAY":           4,
	}
)

func (x QuestionType) Enum() *QuestionType {
	p := new(QuestionType)
	*p = x
	return p
}

func (x QuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_quiz_quiz_proto_enumTypes[0].Descriptor()
}

func (QuestionType) Type() protoreflect.EnumType {
	return &file_quiz_quiz_proto_enumTypes[0]
}

func (x QuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionType.Descriptor instead.
func (QuestionType) EnumDescriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{0}
}

// 题目难度枚举
type DifficultyLevel int32

const (
	DifficultyLevel_EASY   DifficultyLevel = 0
	DifficultyLevel_MEDIUM DifficultyLevel = 1
	DifficultyLevel_HARD   DifficultyLevel = 2
)

// Enum value maps for DifficultyLevel.
var (
	DifficultyLevel_name = map[int32]string{
		0: "EASY",
		1: "MEDIUM",
		2: "HARD",
	}
	DifficultyLevel_value = map[string]int32{
		"EASY":   0,
		"MEDIUM": 1,
		"HARD":   2,
	}
)

func (x DifficultyLevel) Enum() *DifficultyLevel {
	p := new(DifficultyLevel)
	*p = x
	return p
}

func (x DifficultyLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DifficultyLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_quiz_quiz_proto_enumTypes[1].Descriptor()
}

func (DifficultyLevel) Type() protoreflect.EnumType {
	return &file_quiz_quiz_proto_enumTypes[1]
}

func (x DifficultyLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DifficultyLevel.Descriptor instead.
func (DifficultyLevel) EnumDescriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{1}
}

// 生成题目请求
type GenerateQuizRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MaterialId      string                 `protobuf:"bytes,1,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`                // 材料ID
	UserId          string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                            // 用户ID
	Types           []QuestionType         `protobuf:"varint,3,rep,packed,name=types,proto3,enum=quiz.QuestionType" json:"types,omitempty"`             // 题目类型
	Difficulty      DifficultyLevel        `protobuf:"varint,4,opt,name=difficulty,proto3,enum=quiz.DifficultyLevel" json:"difficulty,omitempty"`       // 难度级别
	Count           int32                  `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`                                           // 生成题目数量
	KnowledgePoints []string               `protobuf:"bytes,6,rep,name=knowledge_points,json=knowledgePoints,proto3" json:"knowledge_points,omitempty"` // 指定知识点
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GenerateQuizRequest) Reset() {
	*x = GenerateQuizRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateQuizRequest) ProtoMessage() {}

func (x *GenerateQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateQuizRequest.ProtoReflect.Descriptor instead.
func (*GenerateQuizRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateQuizRequest) GetMaterialId() string {
	if x != nil {
		return x.MaterialId
	}
	return ""
}

func (x *GenerateQuizRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GenerateQuizRequest) GetTypes() []QuestionType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *GenerateQuizRequest) GetDifficulty() DifficultyLevel {
	if x != nil {
		return x.Difficulty
	}
	return DifficultyLevel_EASY
}

func (x *GenerateQuizRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GenerateQuizRequest) GetKnowledgePoints() []string {
	if x != nil {
		return x.KnowledgePoints
	}
	return nil
}

// 生成题目响应
type GenerateQuizResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Questions     []*Question            `protobuf:"bytes,3,rep,name=questions,proto3" json:"questions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateQuizResponse) Reset() {
	*x = GenerateQuizResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateQuizResponse) ProtoMessage() {}

func (x *GenerateQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateQuizResponse.ProtoReflect.Descriptor instead.
func (*GenerateQuizResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateQuizResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GenerateQuizResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GenerateQuizResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

// 题目结构
type Question struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QuestionId      string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Type            QuestionType           `protobuf:"varint,2,opt,name=type,proto3,enum=quiz.QuestionType" json:"type,omitempty"`
	Content         string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                                  // 题目内容
	Options         []string               `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`                                  // 选项（选择题用）
	CorrectAnswer   string                 `protobuf:"bytes,5,opt,name=correct_answer,json=correctAnswer,proto3" json:"correct_answer,omitempty"` // 正确答案
	Explanation     string                 `protobuf:"bytes,6,opt,name=explanation,proto3" json:"explanation,omitempty"`                          // 解析
	Difficulty      DifficultyLevel        `protobuf:"varint,7,opt,name=difficulty,proto3,enum=quiz.DifficultyLevel" json:"difficulty,omitempty"`
	KnowledgePoints []string               `protobuf:"bytes,8,rep,name=knowledge_points,json=knowledgePoints,proto3" json:"knowledge_points,omitempty"` // 关联知识点
	MaterialId      string                 `protobuf:"bytes,9,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`                // 来源材料
	CreatedAt       string                 `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Question) Reset() {
	*x = Question{}
	mi := &file_quiz_quiz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{2}
}

func (x *Question) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *Question) GetType() QuestionType {
	if x != nil {
		return x.Type
	}
	return QuestionType_MULTIPLE_CHOICE
}

func (x *Question) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Question) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Question) GetCorrectAnswer() string {
	if x != nil {
		return x.CorrectAnswer
	}
	return ""
}

func (x *Question) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

func (x *Question) GetDifficulty() DifficultyLevel {
	if x != nil {
		return x.Difficulty
	}
	return DifficultyLevel_EASY
}

func (x *Question) GetKnowledgePoints() []string {
	if x != nil {
		return x.KnowledgePoints
	}
	return nil
}

func (x *Question) GetMaterialId() string {
	if x != nil {
		return x.MaterialId
	}
	return ""
}

func (x *Question) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

// 获取题目请求
type GetQuizRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuizRequest) Reset() {
	*x = GetQuizRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuizRequest) ProtoMessage() {}

func (x *GetQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuizRequest.ProtoReflect.Descriptor instead.
func (*GetQuizRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{3}
}

func (x *GetQuizRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

// 获取题目响应
type GetQuizResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Question      *Question              `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQuizResponse) Reset() {
	*x = GetQuizResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuizResponse) ProtoMessage() {}

func (x *GetQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuizResponse.ProtoReflect.Descriptor instead.
func (*GetQuizResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{4}
}

func (x *GetQuizResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetQuizResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetQuizResponse) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

// 题目列表请求
type ListQuizzesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MaterialId    string                 `protobuf:"bytes,2,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"`
	Type          QuestionType           `protobuf:"varint,3,opt,name=type,proto3,enum=quiz.QuestionType" json:"type,omitempty"`
	Difficulty    DifficultyLevel        `protobuf:"varint,4,opt,name=difficulty,proto3,enum=quiz.DifficultyLevel" json:"difficulty,omitempty"`
	Page          int32                  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuizzesRequest) Reset() {
	*x = ListQuizzesRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuizzesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuizzesRequest) ProtoMessage() {}

func (x *ListQuizzesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuizzesRequest.ProtoReflect.Descriptor instead.
func (*ListQuizzesRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{5}
}

func (x *ListQuizzesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListQuizzesRequest) GetMaterialId() string {
	if x != nil {
		return x.MaterialId
	}
	return ""
}

func (x *ListQuizzesRequest) GetType() QuestionType {
	if x != nil {
		return x.Type
	}
	return QuestionType_MULTIPLE_CHOICE
}

func (x *ListQuizzesRequest) GetDifficulty() DifficultyLevel {
	if x != nil {
		return x.Difficulty
	}
	return DifficultyLevel_EASY
}

func (x *ListQuizzesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListQuizzesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 题目列表响应
type ListQuizzesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Questions     []*Question            `protobuf:"bytes,3,rep,name=questions,proto3" json:"questions,omitempty"`
	Total         int32                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Page          int32                  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQuizzesResponse) Reset() {
	*x = ListQuizzesResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQuizzesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuizzesResponse) ProtoMessage() {}

func (x *ListQuizzesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuizzesResponse.ProtoReflect.Descriptor instead.
func (*ListQuizzesResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{6}
}

func (x *ListQuizzesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ListQuizzesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListQuizzesResponse) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *ListQuizzesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListQuizzesResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListQuizzesResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 提交答案请求
type SubmitAnswerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestionId    string                 `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Answer        string                 `protobuf:"bytes,3,opt,name=answer,proto3" json:"answer,omitempty"` // 用户答案
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerRequest) Reset() {
	*x = SubmitAnswerRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerRequest) ProtoMessage() {}

func (x *SubmitAnswerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerRequest.ProtoReflect.Descriptor instead.
func (*SubmitAnswerRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{7}
}

func (x *SubmitAnswerRequest) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *SubmitAnswerRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubmitAnswerRequest) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

// 提交答案响应
type SubmitAnswerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	IsCorrect     bool                   `protobuf:"varint,3,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`            // 是否正确
	Score         float32                `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`                                    // 得分
	CorrectAnswer string                 `protobuf:"bytes,5,opt,name=correct_answer,json=correctAnswer,proto3" json:"correct_answer,omitempty"` // 正确答案
	Explanation   string                 `protobuf:"bytes,6,opt,name=explanation,proto3" json:"explanation,omitempty"`                          // 解析
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitAnswerResponse) Reset() {
	*x = SubmitAnswerResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitAnswerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerResponse) ProtoMessage() {}

func (x *SubmitAnswerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerResponse.ProtoReflect.Descriptor instead.
func (*SubmitAnswerResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{8}
}

func (x *SubmitAnswerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubmitAnswerResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SubmitAnswerResponse) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

func (x *SubmitAnswerResponse) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SubmitAnswerResponse) GetCorrectAnswer() string {
	if x != nil {
		return x.CorrectAnswer
	}
	return ""
}

func (x *SubmitAnswerResponse) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

// 用户答题记录
type UserAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AnswerId      string                 `protobuf:"bytes,1,opt,name=answer_id,json=answerId,proto3" json:"answer_id,omitempty"`
	QuestionId    string                 `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Answer        string                 `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
	IsCorrect     bool                   `protobuf:"varint,5,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`
	Score         float32                `protobuf:"fixed32,6,opt,name=score,proto3" json:"score,omitempty"`
	AnsweredAt    string                 `protobuf:"bytes,7,opt,name=answered_at,json=answeredAt,proto3" json:"answered_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAnswer) Reset() {
	*x = UserAnswer{}
	mi := &file_quiz_quiz_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAnswer) ProtoMessage() {}

func (x *UserAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAnswer.ProtoReflect.Descriptor instead.
func (*UserAnswer) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{9}
}

func (x *UserAnswer) GetAnswerId() string {
	if x != nil {
		return x.AnswerId
	}
	return ""
}

func (x *UserAnswer) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *UserAnswer) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserAnswer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *UserAnswer) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

func (x *UserAnswer) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserAnswer) GetAnsweredAt() string {
	if x != nil {
		return x.AnsweredAt
	}
	return ""
}

// 获取用户答题历史请求
type GetUserQuizHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserQuizHistoryRequest) Reset() {
	*x = GetUserQuizHistoryRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserQuizHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserQuizHistoryRequest) ProtoMessage() {}

func (x *GetUserQuizHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserQuizHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetUserQuizHistoryRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserQuizHistoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserQuizHistoryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserQuizHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取用户答题历史响应
type GetUserQuizHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Answers       []*UserAnswer          `protobuf:"bytes,3,rep,name=answers,proto3" json:"answers,omitempty"`
	Total         int32                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserQuizHistoryResponse) Reset() {
	*x = GetUserQuizHistoryResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserQuizHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserQuizHistoryResponse) ProtoMessage() {}

func (x *GetUserQuizHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserQuizHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetUserQuizHistoryResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{11}
}

func (x *GetUserQuizHistoryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetUserQuizHistoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetUserQuizHistoryResponse) GetAnswers() []*UserAnswer {
	if x != nil {
		return x.Answers
	}
	return nil
}

func (x *GetUserQuizHistoryResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 知识点统计
type KnowledgePointStats struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	KnowledgePoint string                 `protobuf:"bytes,1,opt,name=knowledge_point,json=knowledgePoint,proto3" json:"knowledge_point,omitempty"`
	TotalQuestions int32                  `protobuf:"varint,2,opt,name=total_questions,json=totalQuestions,proto3" json:"total_questions,omitempty"`                        // 总题数
	CorrectAnswers int32                  `protobuf:"varint,3,opt,name=correct_answers,json=correctAnswers,proto3" json:"correct_answers,omitempty"`                        // 正确题数
	AccuracyRate   float32                `protobuf:"fixed32,4,opt,name=accuracy_rate,json=accuracyRate,proto3" json:"accuracy_rate,omitempty"`                             // 正确率
	AvgDifficulty  DifficultyLevel        `protobuf:"varint,5,opt,name=avg_difficulty,json=avgDifficulty,proto3,enum=quiz.DifficultyLevel" json:"avg_difficulty,omitempty"` // 平均难度
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KnowledgePointStats) Reset() {
	*x = KnowledgePointStats{}
	mi := &file_quiz_quiz_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgePointStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgePointStats) ProtoMessage() {}

func (x *KnowledgePointStats) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgePointStats.ProtoReflect.Descriptor instead.
func (*KnowledgePointStats) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{12}
}

func (x *KnowledgePointStats) GetKnowledgePoint() string {
	if x != nil {
		return x.KnowledgePoint
	}
	return ""
}

func (x *KnowledgePointStats) GetTotalQuestions() int32 {
	if x != nil {
		return x.TotalQuestions
	}
	return 0
}

func (x *KnowledgePointStats) GetCorrectAnswers() int32 {
	if x != nil {
		return x.CorrectAnswers
	}
	return 0
}

func (x *KnowledgePointStats) GetAccuracyRate() float32 {
	if x != nil {
		return x.AccuracyRate
	}
	return 0
}

func (x *KnowledgePointStats) GetAvgDifficulty() DifficultyLevel {
	if x != nil {
		return x.AvgDifficulty
	}
	return DifficultyLevel_EASY
}

// 获取知识点掌握度统计请求
type GetKnowledgeStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MaterialId    string                 `protobuf:"bytes,2,opt,name=material_id,json=materialId,proto3" json:"material_id,omitempty"` // 可选，指定材料
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKnowledgeStatsRequest) Reset() {
	*x = GetKnowledgeStatsRequest{}
	mi := &file_quiz_quiz_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeStatsRequest) ProtoMessage() {}

func (x *GetKnowledgeStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeStatsRequest.ProtoReflect.Descriptor instead.
func (*GetKnowledgeStatsRequest) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{13}
}

func (x *GetKnowledgeStatsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetKnowledgeStatsRequest) GetMaterialId() string {
	if x != nil {
		return x.MaterialId
	}
	return ""
}

// 获取知识点掌握度统计响应
type GetKnowledgeStatsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message         string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Stats           []*KnowledgePointStats `protobuf:"bytes,3,rep,name=stats,proto3" json:"stats,omitempty"`
	OverallAccuracy float32                `protobuf:"fixed32,4,opt,name=overall_accuracy,json=overallAccuracy,proto3" json:"overall_accuracy,omitempty"` // 总体正确率
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetKnowledgeStatsResponse) Reset() {
	*x = GetKnowledgeStatsResponse{}
	mi := &file_quiz_quiz_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeStatsResponse) ProtoMessage() {}

func (x *GetKnowledgeStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quiz_quiz_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeStatsResponse.ProtoReflect.Descriptor instead.
func (*GetKnowledgeStatsResponse) Descriptor() ([]byte, []int) {
	return file_quiz_quiz_proto_rawDescGZIP(), []int{14}
}

func (x *GetKnowledgeStatsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetKnowledgeStatsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetKnowledgeStatsResponse) GetStats() []*KnowledgePointStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *GetKnowledgeStatsResponse) GetOverallAccuracy() float32 {
	if x != nil {
		return x.OverallAccuracy
	}
	return 0
}

var File_quiz_quiz_proto protoreflect.FileDescriptor

const file_quiz_quiz_proto_rawDesc = "" +
	"\n" +
	"\x0fquiz/quiz.proto\x12\x04quiz\"\xf1\x01\n" +
	"\x13GenerateQuizRequest\x12\x1f\n" +
	"\vmaterial_id\x18\x01 \x01(\tR\n" +
	"materialId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12(\n" +
	"\x05types\x18\x03 \x03(\x0e2\x12.quiz.QuestionTypeR\x05types\x125\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\x0e2\x15.quiz.DifficultyLevelR\n" +
	"difficulty\x12\x14\n" +
	"\x05count\x18\x05 \x01(\x05R\x05count\x12)\n" +
	"\x10knowledge_points\x18\x06 \x03(\tR\x0fknowledgePoints\"x\n" +
	"\x14GenerateQuizResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12,\n" +
	"\tquestions\x18\x03 \x03(\v2\x0e.quiz.QuestionR\tquestions\"\xf2\x02\n" +
	"\bQuestion\x12\x1f\n" +
	"\vquestion_id\x18\x01 \x01(\tR\n" +
	"questionId\x12&\n" +
	"\x04type\x18\x02 \x01(\x0e2\x12.quiz.QuestionTypeR\x04type\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12\x18\n" +
	"\aoptions\x18\x04 \x03(\tR\aoptions\x12%\n" +
	"\x0ecorrect_answer\x18\x05 \x01(\tR\rcorrectAnswer\x12 \n" +
	"\vexplanation\x18\x06 \x01(\tR\vexplanation\x125\n" +
	"\n" +
	"difficulty\x18\a \x01(\x0e2\x15.quiz.DifficultyLevelR\n" +
	"difficulty\x12)\n" +
	"\x10knowledge_points\x18\b \x03(\tR\x0fknowledgePoints\x12\x1f\n" +
	"\vmaterial_id\x18\t \x01(\tR\n" +
	"materialId\x12\x1d\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\tR\tcreatedAt\"1\n" +
	"\x0eGetQuizRequest\x12\x1f\n" +
	"\vquestion_id\x18\x01 \x01(\tR\n" +
	"questionId\"q\n" +
	"\x0fGetQuizResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12*\n" +
	"\bquestion\x18\x03 \x01(\v2\x0e.quiz.QuestionR\bquestion\"\xde\x01\n" +
	"\x12ListQuizzesRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1f\n" +
	"\vmaterial_id\x18\x02 \x01(\tR\n" +
	"materialId\x12&\n" +
	"\x04type\x18\x03 \x01(\x0e2\x12.quiz.QuestionTypeR\x04type\x125\n" +
	"\n" +
	"difficulty\x18\x04 \x01(\x0e2\x15.quiz.DifficultyLevelR\n" +
	"difficulty\x12\x12\n" +
	"\x04page\x18\x05 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x06 \x01(\x05R\bpageSize\"\xbe\x01\n" +
	"\x13ListQuizzesResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12,\n" +
	"\tquestions\x18\x03 \x03(\v2\x0e.quiz.QuestionR\tquestions\x12\x14\n" +
	"\x05total\x18\x04 \x01(\x05R\x05total\x12\x12\n" +
	"\x04page\x18\x05 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x06 \x01(\x05R\bpageSize\"g\n" +
	"\x13SubmitAnswerRequest\x12\x1f\n" +
	"\vquestion_id\x18\x01 \x01(\tR\n" +
	"questionId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x16\n" +
	"\x06answer\x18\x03 \x01(\tR\x06answer\"\xc8\x01\n" +
	"\x14SubmitAnswerResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1d\n" +
	"\n" +
	"is_correct\x18\x03 \x01(\bR\tisCorrect\x12\x14\n" +
	"\x05score\x18\x04 \x01(\x02R\x05score\x12%\n" +
	"\x0ecorrect_answer\x18\x05 \x01(\tR\rcorrectAnswer\x12 \n" +
	"\vexplanation\x18\x06 \x01(\tR\vexplanation\"\xd1\x01\n" +
	"\n" +
	"UserAnswer\x12\x1b\n" +
	"\tanswer_id\x18\x01 \x01(\tR\banswerId\x12\x1f\n" +
	"\vquestion_id\x18\x02 \x01(\tR\n" +
	"questionId\x12\x17\n" +
	"\auser_id\x18\x03 \x01(\tR\x06userId\x12\x16\n" +
	"\x06answer\x18\x04 \x01(\tR\x06answer\x12\x1d\n" +
	"\n" +
	"is_correct\x18\x05 \x01(\bR\tisCorrect\x12\x14\n" +
	"\x05score\x18\x06 \x01(\x02R\x05score\x12\x1f\n" +
	"\vanswered_at\x18\a \x01(\tR\n" +
	"answeredAt\"e\n" +
	"\x19GetUserQuizHistoryRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\"\x92\x01\n" +
	"\x1aGetUserQuizHistoryResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12*\n" +
	"\aanswers\x18\x03 \x03(\v2\x10.quiz.UserAnswerR\aanswers\x12\x14\n" +
	"\x05total\x18\x04 \x01(\x05R\x05total\"\xf3\x01\n" +
	"\x13KnowledgePointStats\x12'\n" +
	"\x0fknowledge_point\x18\x01 \x01(\tR\x0eknowledgePoint\x12'\n" +
	"\x0ftotal_questions\x18\x02 \x01(\x05R\x0etotalQuestions\x12'\n" +
	"\x0fcorrect_answers\x18\x03 \x01(\x05R\x0ecorrectAnswers\x12#\n" +
	"\raccuracy_rate\x18\x04 \x01(\x02R\faccuracyRate\x12<\n" +
	"\x0eavg_difficulty\x18\x05 \x01(\x0e2\x15.quiz.DifficultyLevelR\ravgDifficulty\"T\n" +
	"\x18GetKnowledgeStatsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1f\n" +
	"\vmaterial_id\x18\x02 \x01(\tR\n" +
	"materialId\"\xab\x01\n" +
	"\x19GetKnowledgeStatsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12/\n" +
	"\x05stats\x18\x03 \x03(\v2\x19.quiz.KnowledgePointStatsR\x05stats\x12)\n" +
	"\x10overall_accuracy\x18\x04 \x01(\x02R\x0foverallAccuracy*`\n" +
	"\fQuestionType\x12\x13\n" +
	"\x0fMULTIPLE_CHOICE\x10\x00\x12\x0e\n" +
	"\n" +
	"FILL_BLANK\x10\x01\x12\x10\n" +
	"\fSHORT_ANSWER\x10\x02\x12\x0e\n" +
	"\n" +
	"TRUE_FALSE\x10\x03\x12\t\n" +
	"\x05ESSAY\x10\x04*1\n" +
	"\x0fDifficultyLevel\x12\b\n" +
	"\x04EASY\x10\x00\x12\n" +
	"\n" +
	"\x06MEDIUM\x10\x01\x12\b\n" +
	"\x04HARD\x10\x022\xc6\x03\n" +
	"\vQuizService\x12E\n" +
	"\fGenerateQuiz\x12\x19.quiz.GenerateQuizRequest\x1a\x1a.quiz.GenerateQuizResponse\x126\n" +
	"\aGetQuiz\x12\x14.quiz.GetQuizRequest\x1a\x15.quiz.GetQuizResponse\x12B\n" +
	"\vListQuizzes\x12\x18.quiz.ListQuizzesRequest\x1a\x19.quiz.ListQuizzesResponse\x12E\n" +
	"\fSubmitAnswer\x12\x19.quiz.SubmitAnswerRequest\x1a\x1a.quiz.SubmitAnswerResponse\x12W\n" +
	"\x12GetUserQuizHistory\x12\x1f.quiz.GetUserQuizHistoryRequest\x1a .quiz.GetUserQuizHistoryResponse\x12T\n" +
	"\x11GetKnowledgeStats\x12\x1e.quiz.GetKnowledgeStatsRequest\x1a\x1f.quiz.GetKnowledgeStatsResponseB*Z(github.com/RigelNana/arkstudy/proto/quizb\x06proto3"

var (
	file_quiz_quiz_proto_rawDescOnce sync.Once
	file_quiz_quiz_proto_rawDescData []byte
)

func file_quiz_quiz_proto_rawDescGZIP() []byte {
	file_quiz_quiz_proto_rawDescOnce.Do(func() {
		file_quiz_quiz_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_quiz_quiz_proto_rawDesc), len(file_quiz_quiz_proto_rawDesc)))
	})
	return file_quiz_quiz_proto_rawDescData
}

var file_quiz_quiz_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_quiz_quiz_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_quiz_quiz_proto_goTypes = []any{
	(QuestionType)(0),                  // 0: quiz.QuestionType
	(DifficultyLevel)(0),               // 1: quiz.DifficultyLevel
	(*GenerateQuizRequest)(nil),        // 2: quiz.GenerateQuizRequest
	(*GenerateQuizResponse)(nil),       // 3: quiz.GenerateQuizResponse
	(*Question)(nil),                   // 4: quiz.Question
	(*GetQuizRequest)(nil),             // 5: quiz.GetQuizRequest
	(*GetQuizResponse)(nil),            // 6: quiz.GetQuizResponse
	(*ListQuizzesRequest)(nil),         // 7: quiz.ListQuizzesRequest
	(*ListQuizzesResponse)(nil),        // 8: quiz.ListQuizzesResponse
	(*SubmitAnswerRequest)(nil),        // 9: quiz.SubmitAnswerRequest
	(*SubmitAnswerResponse)(nil),       // 10: quiz.SubmitAnswerResponse
	(*UserAnswer)(nil),                 // 11: quiz.UserAnswer
	(*GetUserQuizHistoryRequest)(nil),  // 12: quiz.GetUserQuizHistoryRequest
	(*GetUserQuizHistoryResponse)(nil), // 13: quiz.GetUserQuizHistoryResponse
	(*KnowledgePointStats)(nil),        // 14: quiz.KnowledgePointStats
	(*GetKnowledgeStatsRequest)(nil),   // 15: quiz.GetKnowledgeStatsRequest
	(*GetKnowledgeStatsResponse)(nil),  // 16: quiz.GetKnowledgeStatsResponse
}
var file_quiz_quiz_proto_depIdxs = []int32{
	0,  // 0: quiz.GenerateQuizRequest.types:type_name -> quiz.QuestionType
	1,  // 1: quiz.GenerateQuizRequest.difficulty:type_name -> quiz.DifficultyLevel
	4,  // 2: quiz.GenerateQuizResponse.questions:type_name -> quiz.Question
	0,  // 3: quiz.Question.type:type_name -> quiz.QuestionType
	1,  // 4: quiz.Question.difficulty:type_name -> quiz.DifficultyLevel
	4,  // 5: quiz.GetQuizResponse.question:type_name -> quiz.Question
	0,  // 6: quiz.ListQuizzesRequest.type:type_name -> quiz.QuestionType
	1,  // 7: quiz.ListQuizzesRequest.difficulty:type_name -> quiz.DifficultyLevel
	4,  // 8: quiz.ListQuizzesResponse.questions:type_name -> quiz.Question
	11, // 9: quiz.GetUserQuizHistoryResponse.answers:type_name -> quiz.UserAnswer
	1,  // 10: quiz.KnowledgePointStats.avg_difficulty:type_name -> quiz.DifficultyLevel
	14, // 11: quiz.GetKnowledgeStatsResponse.stats:type_name -> quiz.KnowledgePointStats
	2,  // 12: quiz.QuizService.GenerateQuiz:input_type -> quiz.GenerateQuizRequest
	5,  // 13: quiz.QuizService.GetQuiz:input_type -> quiz.GetQuizRequest
	7,  // 14: quiz.QuizService.ListQuizzes:input_type -> quiz.ListQuizzesRequest
	9,  // 15: quiz.QuizService.SubmitAnswer:input_type -> quiz.SubmitAnswerRequest
	12, // 16: quiz.QuizService.GetUserQuizHistory:input_type -> quiz.GetUserQuizHistoryRequest
	15, // 17: quiz.QuizService.GetKnowledgeStats:input_type -> quiz.GetKnowledgeStatsRequest
	3,  // 18: quiz.QuizService.GenerateQuiz:output_type -> quiz.GenerateQuizResponse
	6,  // 19: quiz.QuizService.GetQuiz:output_type -> quiz.GetQuizResponse
	8,  // 20: quiz.QuizService.ListQuizzes:output_type -> quiz.ListQuizzesResponse
	10, // 21: quiz.QuizService.SubmitAnswer:output_type -> quiz.SubmitAnswerResponse
	13, // 22: quiz.QuizService.GetUserQuizHistory:output_type -> quiz.GetUserQuizHistoryResponse
	16, // 23: quiz.QuizService.GetKnowledgeStats:output_type -> quiz.GetKnowledgeStatsResponse
	18, // [18:24] is the sub-list for method output_type
	12, // [12:18] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_quiz_quiz_proto_init() }
func file_quiz_quiz_proto_init() {
	if File_quiz_quiz_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_quiz_quiz_proto_rawDesc), len(file_quiz_quiz_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quiz_quiz_proto_goTypes,
		DependencyIndexes: file_quiz_quiz_proto_depIdxs,
		EnumInfos:         file_quiz_quiz_proto_enumTypes,
		MessageInfos:      file_quiz_quiz_proto_msgTypes,
	}.Build()
	File_quiz_quiz_proto = out.File
	file_quiz_quiz_proto_goTypes = nil
	file_quiz_quiz_proto_depIdxs = nil
}
