// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: quiz/quiz.proto

package quiz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuizService_GenerateQuiz_FullMethodName       = "/quiz.QuizService/GenerateQuiz"
	QuizService_GetQuiz_FullMethodName            = "/quiz.QuizService/GetQuiz"
	QuizService_ListQuizzes_FullMethodName        = "/quiz.QuizService/ListQuizzes"
	QuizService_SubmitAnswer_FullMethodName       = "/quiz.QuizService/SubmitAnswer"
	QuizService_GetUserQuizHistory_FullMethodName = "/quiz.QuizService/GetUserQuizHistory"
	QuizService_GetKnowledgeStats_FullMethodName  = "/quiz.QuizService/GetKnowledgeStats"
)

// QuizServiceClient is the client API for QuizService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Quiz服务定义
type QuizServiceClient interface {
	// 基于材料内容生成题目
	GenerateQuiz(ctx context.Context, in *GenerateQuizRequest, opts ...grpc.CallOption) (*GenerateQuizResponse, error)
	// 获取题目详情
	GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error)
	// 获取题目列表
	ListQuizzes(ctx context.Context, in *ListQuizzesRequest, opts ...grpc.CallOption) (*ListQuizzesResponse, error)
	// 提交答案
	SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error)
	// 获取用户答题历史
	GetUserQuizHistory(ctx context.Context, in *GetUserQuizHistoryRequest, opts ...grpc.CallOption) (*GetUserQuizHistoryResponse, error)
	// 获取知识点掌握度统计
	GetKnowledgeStats(ctx context.Context, in *GetKnowledgeStatsRequest, opts ...grpc.CallOption) (*GetKnowledgeStatsResponse, error)
}

type quizServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizServiceClient(cc grpc.ClientConnInterface) QuizServiceClient {
	return &quizServiceClient{cc}
}

func (c *quizServiceClient) GenerateQuiz(ctx context.Context, in *GenerateQuizRequest, opts ...grpc.CallOption) (*GenerateQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateQuizResponse)
	err := c.cc.Invoke(ctx, QuizService_GenerateQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) GetQuiz(ctx context.Context, in *GetQuizRequest, opts ...grpc.CallOption) (*GetQuizResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuizResponse)
	err := c.cc.Invoke(ctx, QuizService_GetQuiz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) ListQuizzes(ctx context.Context, in *ListQuizzesRequest, opts ...grpc.CallOption) (*ListQuizzesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuizzesResponse)
	err := c.cc.Invoke(ctx, QuizService_ListQuizzes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) SubmitAnswer(ctx context.Context, in *SubmitAnswerRequest, opts ...grpc.CallOption) (*SubmitAnswerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitAnswerResponse)
	err := c.cc.Invoke(ctx, QuizService_SubmitAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) GetUserQuizHistory(ctx context.Context, in *GetUserQuizHistoryRequest, opts ...grpc.CallOption) (*GetUserQuizHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserQuizHistoryResponse)
	err := c.cc.Invoke(ctx, QuizService_GetUserQuizHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizServiceClient) GetKnowledgeStats(ctx context.Context, in *GetKnowledgeStatsRequest, opts ...grpc.CallOption) (*GetKnowledgeStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnowledgeStatsResponse)
	err := c.cc.Invoke(ctx, QuizService_GetKnowledgeStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServiceServer is the server API for QuizService service.
// All implementations must embed UnimplementedQuizServiceServer
// for forward compatibility.
//
// Quiz服务定义
type QuizServiceServer interface {
	// 基于材料内容生成题目
	GenerateQuiz(context.Context, *GenerateQuizRequest) (*GenerateQuizResponse, error)
	// 获取题目详情
	GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error)
	// 获取题目列表
	ListQuizzes(context.Context, *ListQuizzesRequest) (*ListQuizzesResponse, error)
	// 提交答案
	SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error)
	// 获取用户答题历史
	GetUserQuizHistory(context.Context, *GetUserQuizHistoryRequest) (*GetUserQuizHistoryResponse, error)
	// 获取知识点掌握度统计
	GetKnowledgeStats(context.Context, *GetKnowledgeStatsRequest) (*GetKnowledgeStatsResponse, error)
	mustEmbedUnimplementedQuizServiceServer()
}

// UnimplementedQuizServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuizServiceServer struct{}

func (UnimplementedQuizServiceServer) GenerateQuiz(context.Context, *GenerateQuizRequest) (*GenerateQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQuiz not implemented")
}
func (UnimplementedQuizServiceServer) GetQuiz(context.Context, *GetQuizRequest) (*GetQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuiz not implemented")
}
func (UnimplementedQuizServiceServer) ListQuizzes(context.Context, *ListQuizzesRequest) (*ListQuizzesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuizzes not implemented")
}
func (UnimplementedQuizServiceServer) SubmitAnswer(context.Context, *SubmitAnswerRequest) (*SubmitAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAnswer not implemented")
}
func (UnimplementedQuizServiceServer) GetUserQuizHistory(context.Context, *GetUserQuizHistoryRequest) (*GetUserQuizHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserQuizHistory not implemented")
}
func (UnimplementedQuizServiceServer) GetKnowledgeStats(context.Context, *GetKnowledgeStatsRequest) (*GetKnowledgeStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeStats not implemented")
}
func (UnimplementedQuizServiceServer) mustEmbedUnimplementedQuizServiceServer() {}
func (UnimplementedQuizServiceServer) testEmbeddedByValue()                     {}

// UnsafeQuizServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServiceServer will
// result in compilation errors.
type UnsafeQuizServiceServer interface {
	mustEmbedUnimplementedQuizServiceServer()
}

func RegisterQuizServiceServer(s grpc.ServiceRegistrar, srv QuizServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuizServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuizService_ServiceDesc, srv)
}

func _QuizService_GenerateQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GenerateQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_GenerateQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GenerateQuiz(ctx, req.(*GenerateQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_GetQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_GetQuiz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetQuiz(ctx, req.(*GetQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_ListQuizzes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuizzesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).ListQuizzes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_ListQuizzes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).ListQuizzes(ctx, req.(*ListQuizzesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_SubmitAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).SubmitAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_SubmitAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).SubmitAnswer(ctx, req.(*SubmitAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_GetUserQuizHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserQuizHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetUserQuizHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_GetUserQuizHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetUserQuizHistory(ctx, req.(*GetUserQuizHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizService_GetKnowledgeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnowledgeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServiceServer).GetKnowledgeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuizService_GetKnowledgeStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServiceServer).GetKnowledgeStats(ctx, req.(*GetKnowledgeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuizService_ServiceDesc is the grpc.ServiceDesc for QuizService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuizService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quiz.QuizService",
	HandlerType: (*QuizServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateQuiz",
			Handler:    _QuizService_GenerateQuiz_Handler,
		},
		{
			MethodName: "GetQuiz",
			Handler:    _QuizService_GetQuiz_Handler,
		},
		{
			MethodName: "ListQuizzes",
			Handler:    _QuizService_ListQuizzes_Handler,
		},
		{
			MethodName: "SubmitAnswer",
			Handler:    _QuizService_SubmitAnswer_Handler,
		},
		{
			MethodName: "GetUserQuizHistory",
			Handler:    _QuizService_GetUserQuizHistory_Handler,
		},
		{
			MethodName: "GetKnowledgeStats",
			Handler:    _QuizService_GetKnowledgeStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quiz/quiz.proto",
}
