// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: proto/material/material.proto

package material

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MaterialService_UploadMaterial_FullMethodName         = "/material.MaterialService/UploadMaterial"
	MaterialService_DeleteMaterial_FullMethodName         = "/material.MaterialService/DeleteMaterial"
	MaterialService_ListMaterials_FullMethodName          = "/material.MaterialService/ListMaterials"
	MaterialService_ProcessMaterial_FullMethodName        = "/material.MaterialService/ProcessMaterial"
	MaterialService_GetProcessingResult_FullMethodName    = "/material.MaterialService/GetProcessingResult"
	MaterialService_ListProcessingResults_FullMethodName  = "/material.MaterialService/ListProcessingResults"
	MaterialService_UpdateProcessingResult_FullMethodName = "/material.MaterialService/UpdateProcessingResult"
)

// MaterialServiceClient is the client API for MaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialServiceClient interface {
	UploadMaterial(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadMaterialRequest, UploadMaterialResponse], error)
	DeleteMaterial(ctx context.Context, in *DeleteMaterialRequest, opts ...grpc.CallOption) (*DeleteMaterialResponse, error)
	ListMaterials(ctx context.Context, in *ListMaterialsRequest, opts ...grpc.CallOption) (*ListMaterialsResponse, error)
	// AI 处理相关服务
	ProcessMaterial(ctx context.Context, in *ProcessMaterialRequest, opts ...grpc.CallOption) (*ProcessMaterialResponse, error)
	GetProcessingResult(ctx context.Context, in *GetProcessingResultRequest, opts ...grpc.CallOption) (*GetProcessingResultResponse, error)
	ListProcessingResults(ctx context.Context, in *ListProcessingResultsRequest, opts ...grpc.CallOption) (*ListProcessingResultsResponse, error)
	UpdateProcessingResult(ctx context.Context, in *UpdateProcessingResultRequest, opts ...grpc.CallOption) (*UpdateProcessingResultResponse, error)
}

type materialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialServiceClient(cc grpc.ClientConnInterface) MaterialServiceClient {
	return &materialServiceClient{cc}
}

func (c *materialServiceClient) UploadMaterial(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadMaterialRequest, UploadMaterialResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MaterialService_ServiceDesc.Streams[0], MaterialService_UploadMaterial_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadMaterialRequest, UploadMaterialResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MaterialService_UploadMaterialClient = grpc.ClientStreamingClient[UploadMaterialRequest, UploadMaterialResponse]

func (c *materialServiceClient) DeleteMaterial(ctx context.Context, in *DeleteMaterialRequest, opts ...grpc.CallOption) (*DeleteMaterialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMaterialResponse)
	err := c.cc.Invoke(ctx, MaterialService_DeleteMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) ListMaterials(ctx context.Context, in *ListMaterialsRequest, opts ...grpc.CallOption) (*ListMaterialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMaterialsResponse)
	err := c.cc.Invoke(ctx, MaterialService_ListMaterials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) ProcessMaterial(ctx context.Context, in *ProcessMaterialRequest, opts ...grpc.CallOption) (*ProcessMaterialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessMaterialResponse)
	err := c.cc.Invoke(ctx, MaterialService_ProcessMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetProcessingResult(ctx context.Context, in *GetProcessingResultRequest, opts ...grpc.CallOption) (*GetProcessingResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProcessingResultResponse)
	err := c.cc.Invoke(ctx, MaterialService_GetProcessingResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) ListProcessingResults(ctx context.Context, in *ListProcessingResultsRequest, opts ...grpc.CallOption) (*ListProcessingResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProcessingResultsResponse)
	err := c.cc.Invoke(ctx, MaterialService_ListProcessingResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) UpdateProcessingResult(ctx context.Context, in *UpdateProcessingResultRequest, opts ...grpc.CallOption) (*UpdateProcessingResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProcessingResultResponse)
	err := c.cc.Invoke(ctx, MaterialService_UpdateProcessingResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialServiceServer is the server API for MaterialService service.
// All implementations must embed UnimplementedMaterialServiceServer
// for forward compatibility.
type MaterialServiceServer interface {
	UploadMaterial(grpc.ClientStreamingServer[UploadMaterialRequest, UploadMaterialResponse]) error
	DeleteMaterial(context.Context, *DeleteMaterialRequest) (*DeleteMaterialResponse, error)
	ListMaterials(context.Context, *ListMaterialsRequest) (*ListMaterialsResponse, error)
	// AI 处理相关服务
	ProcessMaterial(context.Context, *ProcessMaterialRequest) (*ProcessMaterialResponse, error)
	GetProcessingResult(context.Context, *GetProcessingResultRequest) (*GetProcessingResultResponse, error)
	ListProcessingResults(context.Context, *ListProcessingResultsRequest) (*ListProcessingResultsResponse, error)
	UpdateProcessingResult(context.Context, *UpdateProcessingResultRequest) (*UpdateProcessingResultResponse, error)
	mustEmbedUnimplementedMaterialServiceServer()
}

// UnimplementedMaterialServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaterialServiceServer struct{}

func (UnimplementedMaterialServiceServer) UploadMaterial(grpc.ClientStreamingServer[UploadMaterialRequest, UploadMaterialResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadMaterial not implemented")
}
func (UnimplementedMaterialServiceServer) DeleteMaterial(context.Context, *DeleteMaterialRequest) (*DeleteMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMaterial not implemented")
}
func (UnimplementedMaterialServiceServer) ListMaterials(context.Context, *ListMaterialsRequest) (*ListMaterialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaterials not implemented")
}
func (UnimplementedMaterialServiceServer) ProcessMaterial(context.Context, *ProcessMaterialRequest) (*ProcessMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMaterial not implemented")
}
func (UnimplementedMaterialServiceServer) GetProcessingResult(context.Context, *GetProcessingResultRequest) (*GetProcessingResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessingResult not implemented")
}
func (UnimplementedMaterialServiceServer) ListProcessingResults(context.Context, *ListProcessingResultsRequest) (*ListProcessingResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessingResults not implemented")
}
func (UnimplementedMaterialServiceServer) UpdateProcessingResult(context.Context, *UpdateProcessingResultRequest) (*UpdateProcessingResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcessingResult not implemented")
}
func (UnimplementedMaterialServiceServer) mustEmbedUnimplementedMaterialServiceServer() {}
func (UnimplementedMaterialServiceServer) testEmbeddedByValue()                         {}

// UnsafeMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialServiceServer will
// result in compilation errors.
type UnsafeMaterialServiceServer interface {
	mustEmbedUnimplementedMaterialServiceServer()
}

func RegisterMaterialServiceServer(s grpc.ServiceRegistrar, srv MaterialServiceServer) {
	// If the following call pancis, it indicates UnimplementedMaterialServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MaterialService_ServiceDesc, srv)
}

func _MaterialService_UploadMaterial_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MaterialServiceServer).UploadMaterial(&grpc.GenericServerStream[UploadMaterialRequest, UploadMaterialResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MaterialService_UploadMaterialServer = grpc.ClientStreamingServer[UploadMaterialRequest, UploadMaterialResponse]

func _MaterialService_DeleteMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).DeleteMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_DeleteMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).DeleteMaterial(ctx, req.(*DeleteMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_ListMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).ListMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_ListMaterials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).ListMaterials(ctx, req.(*ListMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_ProcessMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).ProcessMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_ProcessMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).ProcessMaterial(ctx, req.(*ProcessMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetProcessingResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessingResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetProcessingResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetProcessingResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetProcessingResult(ctx, req.(*GetProcessingResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_ListProcessingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessingResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).ListProcessingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_ListProcessingResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).ListProcessingResults(ctx, req.(*ListProcessingResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_UpdateProcessingResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProcessingResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).UpdateProcessingResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_UpdateProcessingResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).UpdateProcessingResult(ctx, req.(*UpdateProcessingResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialService_ServiceDesc is the grpc.ServiceDesc for MaterialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "material.MaterialService",
	HandlerType: (*MaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteMaterial",
			Handler:    _MaterialService_DeleteMaterial_Handler,
		},
		{
			MethodName: "ListMaterials",
			Handler:    _MaterialService_ListMaterials_Handler,
		},
		{
			MethodName: "ProcessMaterial",
			Handler:    _MaterialService_ProcessMaterial_Handler,
		},
		{
			MethodName: "GetProcessingResult",
			Handler:    _MaterialService_GetProcessingResult_Handler,
		},
		{
			MethodName: "ListProcessingResults",
			Handler:    _MaterialService_ListProcessingResults_Handler,
		},
		{
			MethodName: "UpdateProcessingResult",
			Handler:    _MaterialService_UpdateProcessingResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadMaterial",
			Handler:       _MaterialService_UploadMaterial_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/material/material.proto",
}
