services:
  gateway:
    build:
      context: ..
      dockerfile: gateway/Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - ../gateway/.env
    depends_on: 
      - user-service
      - auth-service
      - material-service
      - llm-service
  auth-service:
    build: 
      context: ..
      dockerfile: services/auth-service/Dockerfile
    ports:
      - "50051:50051"
    env_file:
      - ../services/auth-service/.env
    depends_on:
      db:
        condition: service_healthy
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
  # Zookeeper removed; use Kafka KRaft mode for simplicity


  
  user-service:
    build:
      context: ..
      dockerfile: services/user-service/Dockerfile
    ports:
      - "50052:50052"
    env_file:
      - ../services/user-service/.env
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_started
  db:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: RigelNana77
      POSTGRES_DB: arkdb
    ports:
      - "5433:5432"
    volumes:
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql:z
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d arkdb"]
      interval: 5s
      timeout: 5s
      retries: 5
  material-service:
    build:
      context: ..
      dockerfile: services/material-service/Dockerfile
    ports:
      - "50053:50053"
    env_file:
      - ../services/material-service/.env
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      user-service:
        condition: service_started
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # Required by Confluent KRaft images: static cluster id (use random-uuid in prod)
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      # Recommended inter-broker listener name
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_MIN_INSYNC_REPLICAS: 1
      # Data dir inside container
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s
  llm-service:
    build:
      context: ..
      dockerfile: services/llm-service/Dockerfile
    ports:
      - "50054:50054"   # gRPC
      - "8000:8000"     # HTTP health
    env_file:
      - ../services/llm-service/.env
    depends_on:
      db:
        condition: service_healthy
      user-service:
        condition: service_started
      material-service:
        condition: service_started
  ocr-service:
    build:
      context: ..
      dockerfile: services/ocr-service/Dockerfile
    ports:
      - "50055:50055"
    env_file:
      - ../services/ocr-service/.env
    depends_on:
      minio:
        condition: service_healthy
    restart: unless-stopped
      
volumes:
  db-data: